
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat May 26 15:32:31 GMT+02:00 2001
//----------------------------------------------------

package org.acplt.oncrpc.apps.jrpcgen;

import org.acplt.oncrpc.apps.jrpcgen.cup_runtime.*;
import java.util.Vector;

/** CUP v0.10k generated parser.
  * @version Sat May 26 15:32:31 GMT+02:00 2001
  */
public class JrpcgenParser extends org.acplt.oncrpc.apps.jrpcgen.cup_runtime.lr_parser {

  /** Default constructor. */
  public JrpcgenParser() {super();}

  /** Constructor which sets the default scanner. */
  public JrpcgenParser(org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\003\004\000\002\020" +
    "\003\000\002\020\004\000\002\004\002\000\002\004\003" +
    "\000\002\005\003\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\007\000\002\010\010\000\002\011" +
    "\003\000\002\011\005\000\002\012\003\000\002\012\005" +
    "\000\002\013\010\000\002\014\014\000\002\015\003\000" +
    "\002\015\004\000\002\016\005\000\002\016\007\000\002" +
    "\016\006\000\002\017\005\000\002\021\012\000\002\022" +
    "\003\000\002\022\004\000\002\023\012\000\002\024\003" +
    "\000\002\024\004\000\002\025\012\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\004\000\002" +
    "\027\005\000\002\027\006\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\004\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\004\000\002\032\004\000\002\032" +
    "\004\000\002\033\004\000\002\033\005\000\002\034\007" +
    "\000\002\034\007\000\002\034\006\000\002\034\007\000" +
    "\002\034\006\000\002\034\004\000\002\034\007\000\002" +
    "\034\007\000\002\034\006\000\002\034\005\000\002\034" +
    "\003\000\002\035\004\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\004\000\002\035\003\000" +
    "\002\035\003\000\002\035\004\000\002\036\003\000\002" +
    "\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\016\021\ufffd\023\021\024\014\042\004\045" +
    "\011\046\007\001\002\000\004\051\224\001\002\000\016" +
    "\021\ufffb\023\ufffb\024\ufffb\042\ufffb\045\ufffb\046\ufffb\001" +
    "\002\000\016\021\ufff7\023\ufff7\024\ufff7\042\ufff7\045\ufff7" +
    "\046\ufff7\001\002\000\004\051\200\001\002\000\016\021" +
    "\ufff9\023\ufff9\024\ufff9\042\ufff9\045\ufff9\046\ufff9\001\002" +
    "\000\004\051\167\001\002\000\016\021\ufff8\023\ufff8\024" +
    "\ufff8\042\ufff8\045\ufff8\046\ufff8\001\002\000\016\021\ufff5" +
    "\023\ufff5\024\ufff5\042\ufff5\045\ufff5\046\ufff5\001\002\000" +
    "\044\030\136\031\055\032\071\033\054\034\051\035\065" +
    "\036\061\037\076\040\072\041\073\042\066\043\135\044" +
    "\134\045\053\046\063\047\057\051\056\001\002\000\016" +
    "\021\ufff6\023\ufff6\024\ufff6\042\ufff6\045\ufff6\046\ufff6\001" +
    "\002\000\004\021\034\001\002\000\016\021\ufffc\023\021" +
    "\024\014\042\004\045\011\046\007\001\002\000\004\002" +
    "\030\001\002\000\004\051\022\001\002\000\004\007\023" +
    "\001\002\000\006\050\024\051\025\001\002\000\016\004" +
    "\uffb5\005\uffb5\006\uffb5\014\uffb5\016\uffb5\020\uffb5\001\002" +
    "\000\016\004\uffb4\005\uffb4\006\uffb4\014\uffb4\016\uffb4\020" +
    "\uffb4\001\002\000\004\004\027\001\002\000\016\021\ufff4" +
    "\023\ufff4\024\ufff4\042\ufff4\045\ufff4\046\ufff4\001\002\000" +
    "\004\002\001\001\002\000\016\021\ufffa\023\ufffa\024\ufffa" +
    "\042\ufffa\045\ufffa\046\ufffa\001\002\000\006\002\000\021" +
    "\034\001\002\000\006\002\uffff\021\uffff\001\002\000\004" +
    "\051\035\001\002\000\004\013\036\001\002\000\004\022" +
    "\040\001\002\000\006\014\uffe5\022\uffe5\001\002\000\004" +
    "\051\047\001\002\000\006\014\043\022\040\001\002\000" +
    "\006\014\uffe4\022\uffe4\001\002\000\004\007\044\001\002" +
    "\000\006\050\024\051\025\001\002\000\004\004\046\001" +
    "\002\000\006\002\uffe6\021\uffe6\001\002\000\004\013\050" +
    "\001\002\000\042\030\074\031\055\032\071\033\054\034" +
    "\051\035\065\036\061\037\076\040\072\041\073\042\066" +
    "\044\060\045\053\046\063\047\057\051\056\001\002\000" +
    "\014\005\uffb8\010\uffb8\012\uffb8\033\130\051\uffb8\001\002" +
    "\000\010\005\uffd6\012\uffd6\051\uffd6\001\002\000\004\051" +
    "\127\001\002\000\012\005\uffba\010\uffba\012\uffba\051\uffba" +
    "\001\002\000\012\005\uffbb\010\uffbb\012\uffbb\051\uffbb\001" +
    "\002\000\012\005\uffd5\010\uffd5\012\uffd5\051\uffd5\001\002" +
    "\000\024\005\uffd1\010\uffd1\012\uffd1\031\055\032\071\033" +
    "\054\034\051\035\065\051\uffd1\001\002\000\010\005\uffd7" +
    "\012\uffd7\051\uffd7\001\002\000\012\005\uffd0\010\uffd0\012" +
    "\uffd0\051\uffd0\001\002\000\044\014\121\030\074\031\055" +
    "\032\071\033\054\034\051\035\065\036\061\037\076\040" +
    "\072\041\073\042\066\044\060\045\053\046\063\047\057" +
    "\051\056\001\002\000\004\051\120\001\002\000\044\014" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\051\uffe2\001\002\000\014\005\uffb7" +
    "\010\uffb7\012\uffb7\033\117\051\uffb7\001\002\000\004\051" +
    "\116\001\002\000\004\051\uffd8\001\002\000\004\051\100" +
    "\001\002\000\014\005\uffbc\010\uffbc\012\uffbc\033\077\051" +
    "\uffbc\001\002\000\012\005\uffce\010\uffce\012\uffce\051\uffce" +
    "\001\002\000\012\005\uffd4\010\uffd4\012\uffd4\051\uffd4\001" +
    "\002\000\004\051\uffd9\001\002\000\012\005\uffd2\010\uffd2" +
    "\012\uffd2\051\uffd2\001\002\000\012\005\uffcf\010\uffcf\012" +
    "\uffcf\051\uffcf\001\002\000\012\005\uffbd\010\uffbd\012\uffbd" +
    "\051\uffbd\001\002\000\004\011\101\001\002\000\042\030" +
    "\104\031\055\032\071\033\054\034\051\035\065\036\061" +
    "\037\076\040\072\041\073\042\066\044\060\045\053\046" +
    "\063\047\057\051\056\001\002\000\010\005\uffdd\012\uffdd" +
    "\051\115\001\002\000\006\005\uffde\012\uffde\001\002\000" +
    "\006\005\uffdf\012\uffdf\001\002\000\006\005\106\012\107" +
    "\001\002\000\040\031\055\032\071\033\054\034\051\035" +
    "\065\036\061\037\076\040\072\041\073\042\066\044\060" +
    "\045\053\046\063\047\057\051\056\001\002\000\004\007" +
    "\110\001\002\000\006\050\024\051\025\001\002\000\004" +
    "\004\112\001\002\000\044\014\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051" +
    "\uffe0\001\002\000\010\005\uffdb\012\uffdb\051\114\001\002" +
    "\000\006\005\uffda\012\uffda\001\002\000\006\005\uffdc\012" +
    "\uffdc\001\002\000\012\005\uffcd\010\uffcd\012\uffcd\051\uffcd" +
    "\001\002\000\012\005\uffb6\010\uffb6\012\uffb6\051\uffb6\001" +
    "\002\000\012\005\uffcb\010\uffcb\012\uffcb\051\uffcb\001\002" +
    "\000\004\007\123\001\002\000\044\014\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\051\uffe1\001\002\000\006\050\024\051\025\001\002" +
    "\000\004\004\125\001\002\000\006\014\uffe3\022\uffe3\001" +
    "\002\000\012\005\uffd3\010\uffd3\012\uffd3\051\uffd3\001\002" +
    "\000\012\005\uffcc\010\uffcc\012\uffcc\051\uffcc\001\002\000" +
    "\012\005\uffb9\010\uffb9\012\uffb9\051\uffb9\001\002\000\006" +
    "\002\ufffe\021\ufffe\001\002\000\004\004\166\001\002\000" +
    "\006\010\154\051\155\001\002\000\004\051\147\001\002" +
    "\000\004\051\137\001\002\000\006\004\uffbe\012\uffbe\001" +
    "\002\000\006\015\141\017\140\001\002\000\010\020\144" +
    "\050\024\051\025\001\002\000\006\050\024\051\025\001" +
    "\002\000\004\016\143\001\002\000\006\004\uffc8\012\uffc8" +
    "\001\002\000\006\004\uffc6\012\uffc6\001\002\000\004\020" +
    "\146\001\002\000\006\004\uffc7\012\uffc7\001\002\000\004" +
    "\017\150\001\002\000\010\020\151\050\024\051\025\001" +
    "\002\000\006\004\uffc4\012\uffc4\001\002\000\004\020\153" +
    "\001\002\000\006\004\uffc5\012\uffc5\001\002\000\004\051" +
    "\165\001\002\000\012\004\uffc3\012\uffc3\015\157\017\156" +
    "\001\002\000\010\020\162\050\024\051\025\001\002\000" +
    "\006\050\024\051\025\001\002\000\004\016\161\001\002" +
    "\000\006\004\uffc2\012\uffc2\001\002\000\006\004\uffc0\012" +
    "\uffc0\001\002\000\004\020\164\001\002\000\006\004\uffc1" +
    "\012\uffc1\001\002\000\006\004\uffbf\012\uffbf\001\002\000" +
    "\016\021\uffe7\023\uffe7\024\uffe7\042\uffe7\045\uffe7\046\uffe7" +
    "\001\002\000\004\013\170\001\002\000\044\030\136\031" +
    "\055\032\071\033\054\034\051\035\065\036\061\037\076" +
    "\040\072\041\073\042\066\043\135\044\134\045\053\046" +
    "\063\047\057\051\056\001\002\000\004\004\177\001\002" +
    "\000\046\014\174\030\136\031\055\032\071\033\054\034" +
    "\051\035\065\036\061\037\076\040\072\041\073\042\066" +
    "\043\135\044\134\045\053\046\063\047\057\051\056\001" +
    "\002\000\004\004\176\001\002\000\004\004\175\001\002" +
    "\000\016\021\uffee\023\uffee\024\uffee\042\uffee\045\uffee\046" +
    "\uffee\001\002\000\046\014\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\051\uffc9\001\002\000\046\014\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\051\uffca\001\002\000\004\025\201\001\002\000\004" +
    "\011\202\001\002\000\044\030\136\031\055\032\071\033" +
    "\054\034\051\035\065\036\061\037\076\040\072\041\073" +
    "\042\066\043\135\044\134\045\053\046\063\047\057\051" +
    "\056\001\002\000\004\012\204\001\002\000\004\013\205" +
    "\001\002\000\006\026\211\027\206\001\002\000\004\006" +
    "\221\001\002\000\010\014\uffec\026\uffec\027\uffec\001\002" +
    "\000\010\014\217\026\211\027\206\001\002\000\006\050" +
    "\024\051\025\001\002\000\004\006\213\001\002\000\052" +
    "\014\uffea\026\uffea\027\uffea\030\136\031\055\032\071\033" +
    "\054\034\051\035\065\036\061\037\076\040\072\041\073" +
    "\042\066\043\135\044\134\045\053\046\063\047\057\051" +
    "\056\001\002\000\004\004\215\001\002\000\010\014\uffe9" +
    "\026\uffe9\027\uffe9\001\002\000\010\014\uffeb\026\uffeb\027" +
    "\uffeb\001\002\000\004\004\220\001\002\000\016\021\uffed" +
    "\023\uffed\024\uffed\042\uffed\045\uffed\046\uffed\001\002\000" +
    "\044\030\136\031\055\032\071\033\054\034\051\035\065" +
    "\036\061\037\076\040\072\041\073\042\066\043\135\044" +
    "\134\045\053\046\063\047\057\051\056\001\002\000\004" +
    "\004\223\001\002\000\010\014\uffe8\026\uffe8\027\uffe8\001" +
    "\002\000\004\013\225\001\002\000\004\051\230\001\002" +
    "\000\006\005\ufff2\014\ufff2\001\002\000\006\005\233\014" +
    "\234\001\002\000\010\005\ufff0\007\231\014\ufff0\001\002" +
    "\000\006\050\024\051\025\001\002\000\006\005\uffef\014" +
    "\uffef\001\002\000\004\051\230\001\002\000\004\004\235" +
    "\001\002\000\016\021\ufff3\023\ufff3\024\ufff3\042\ufff3\045" +
    "\ufff3\046\ufff3\001\002\000\006\005\ufff1\014\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\024\003\017\004\015\005\016\006\004\007" +
    "\007\010\011\013\005\014\014\017\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\132\034\131\035\074\001" +
    "\001\000\002\001\001\000\006\020\031\021\032\001\001" +
    "\000\016\006\030\007\007\010\011\013\005\014\014\017" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\040\023\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\061\025\063" +
    "\030\067\031\066\032\051\035\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\121" +
    "\030\067\031\066\032\051\035\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\104\027\102\031\101\032\051\035\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\112\032\051\035\074" +
    "\001\001\000\002\001\001\000\004\036\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\144\001\001\000\004\036\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\162\001\001\000\004\036\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\132\033\171\034\170\035" +
    "\074\001\001\000\002\001\001\000\010\032\132\034\172" +
    "\035\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\132\034\202\035" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\207\016\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\215\001\001\000\004\036\211\001\001" +
    "\000\002\001\001\000\010\032\132\034\213\035\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\132\034" +
    "\221\035\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\226\012\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\231\001\001\000\002\001\001\000\004\012\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JrpcgenParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JrpcgenParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol do_action(
    int                        act_num,
    org.acplt.oncrpc.apps.jrpcgen.cup_runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JrpcgenParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuffer msg = new StringBuffer("jrpcgen: error");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            msg.append(" in line ");
            msg.append(s.left);
        }
        msg.append(": ");
        msg.append(message);
        System.out.println(msg);
        throw(new JrpcgenParserException());
    }

    public void report_error(String message, int line) {
        StringBuffer msg = new StringBuffer("jrpcgen: error in line ");
        msg.append(line);
        msg.append(": ");
        msg.append(message);
        System.out.println(msg);
        throw(new JrpcgenParserException());
    }

    public void syntax_error(Symbol cur_token) {
        StringBuffer msg = new StringBuffer("jrpcgen: syntax error in line ");
        msg.append(cur_token.left);
        System.out.println(msg);
        throw(new JrpcgenParserException());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw(new RuntimeException("Fatal Syntax Error"));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JrpcgenParser$actions {
  private final JrpcgenParser parser;

  /** Constructor */
  CUP$JrpcgenParser$actions(JrpcgenParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol CUP$JrpcgenParser$do_action(
    int                        CUP$JrpcgenParser$act_num,
    org.acplt.oncrpc.apps.jrpcgen.cup_runtime.lr_parser CUP$JrpcgenParser$parser,
    java.util.Stack            CUP$JrpcgenParser$stack,
    int                        CUP$JrpcgenParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol CUP$JrpcgenParser$result;

      /* select the action based on the action number */
      switch (CUP$JrpcgenParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // value ::= IDENTIFIER 
            {
              String RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = id; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(28/*value*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // value ::= INTEGER_LITERAL 
            {
              String RESULT = null;
		int litleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int litright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String lit = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = lit; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(28/*value*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // int_types ::= HYPER INT 
            {
              String RESULT = null;
		 RESULT = "long"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // int_types ::= HYPER 
            {
              String RESULT = null;
		 RESULT = "long"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // int_types ::= LONG 
            {
              String RESULT = null;
		 RESULT = "int"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // int_types ::= LONG INT 
            {
              String RESULT = null;
		 RESULT = "int"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // int_types ::= INT 
            {
              String RESULT = null;
		 RESULT = "int"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // int_types ::= CHAR 
            {
              String RESULT = null;
		 RESULT = "byte"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // int_types ::= SHORT 
            {
              String RESULT = null;
		 RESULT = "short"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // int_types ::= SHORT INT 
            {
              String RESULT = null;
		 RESULT = "short"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(27/*int_types*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration ::= VOID 
            {
              JrpcgenDeclaration RESULT = null;
		
                RESULT = new JrpcgenDeclaration(null, "void");
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= type_specifier STAR IDENTIFIER 
            {
              JrpcgenDeclaration RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                RESULT = new JrpcgenDeclaration(
                    id, type, JrpcgenDeclaration.INDIRECTION, null);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= type_specifier IDENTIFIER LANGLE RANGLE 
            {
              JrpcgenDeclaration RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		
                RESULT = new JrpcgenDeclaration(
                    id, type, JrpcgenDeclaration.DYNAMICVECTOR, null);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= type_specifier IDENTIFIER LANGLE value RANGLE 
            {
              JrpcgenDeclaration RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int sizeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int sizeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String size = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
                RESULT = new JrpcgenDeclaration(
                    id, type, JrpcgenDeclaration.DYNAMICVECTOR, size);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaration ::= type_specifier IDENTIFIER LBRACKET value RBRACKET 
            {
              JrpcgenDeclaration RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int sizeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int sizeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String size = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               RESULT = new JrpcgenDeclaration(
                   id, type, JrpcgenDeclaration.FIXEDVECTOR, size);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= type_specifier IDENTIFIER 
            {
              JrpcgenDeclaration RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = new JrpcgenDeclaration(id, type);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaration ::= STRING IDENTIFIER LANGLE RANGLE 
            {
              JrpcgenDeclaration RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		
                RESULT = new JrpcgenDeclaration(
                    id, "String", JrpcgenDeclaration.DYNAMICVECTOR, null);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaration ::= STRING IDENTIFIER LANGLE value RANGLE 
            {
              JrpcgenDeclaration RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int sizeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int sizeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String size = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
                RESULT = new JrpcgenDeclaration(
                    id, "String", JrpcgenDeclaration.DYNAMICVECTOR, size);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= OPAQUE IDENTIFIER LANGLE RANGLE 
            {
              JrpcgenDeclaration RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		
                // Note: we use the pseudo-type "opaque" here to distinguish
                // real byte arrays from fake byte (char) arrays.
                RESULT = new JrpcgenDeclaration(
                    id, "opaque", JrpcgenDeclaration.DYNAMICVECTOR, null);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= OPAQUE IDENTIFIER LANGLE value RANGLE 
            {
              JrpcgenDeclaration RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int sizeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int sizeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String size = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
                // Note: we use the pseudo-type "opaque" here to distinguish
                // real byte arrays from fake byte (char) arrays.
                RESULT = new JrpcgenDeclaration(
                    id, "opaque", JrpcgenDeclaration.DYNAMICVECTOR, size);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= OPAQUE IDENTIFIER LBRACKET value RBRACKET 
            {
              JrpcgenDeclaration RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int sizeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int sizeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String size = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
                // Note: we use the pseudo-type "opaque" here to distinguish
                // real byte arrays from fake byte (char) arrays.
                RESULT = new JrpcgenDeclaration(
                    id, "opaque", JrpcgenDeclaration.FIXEDVECTOR, size);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(26/*declaration*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declarations ::= declarations declaration SEMICOLON 
            {
              Vector RESULT = null;
		int declsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int declsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		Vector decls = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		int declleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int declright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		JrpcgenDeclaration decl = (JrpcgenDeclaration)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               decls.addElement(decl);
               RESULT = decls;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(25/*declarations*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declarations ::= declaration SEMICOLON 
            {
              Vector RESULT = null;
		int declleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int declright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		JrpcgenDeclaration decl = (JrpcgenDeclaration)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               RESULT = new Vector();
               RESULT.addElement(decl);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(25/*declarations*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_specifier ::= UNION IDENTIFIER 
            {
              String RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = id; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_specifier ::= STRUCT IDENTIFIER 
            {
              String RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = id; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_specifier ::= ENUM IDENTIFIER 
            {
              String RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = id; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_specifier ::= QUADRUPLE 
            {
              String RESULT = null;
		 RESULT = "double"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_specifier ::= DOUBLE 
            {
              String RESULT = null;
		 RESULT = "double"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_specifier ::= FLOAT 
            {
              String RESULT = null;
		 RESULT = "float"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_specifier ::= UNSIGNED 
            {
              String RESULT = null;
		 RESULT = "int"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_specifier ::= int_types 
            {
              String RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = type; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_specifier ::= UNSIGNED int_types 
            {
              String RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = type; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_specifier ::= BOOL 
            {
              String RESULT = null;
		 RESULT = "boolean"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_specifier ::= IDENTIFIER 
            {
              String RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = id; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(24/*type_specifier*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_specifier_incl_string ::= type_specifier 
            {
              String RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = type; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(23/*type_specifier_incl_string*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_specifier_incl_string ::= STRING 
            {
              String RESULT = null;
		 RESULT = "String"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(23/*type_specifier_incl_string*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_specifier_incl_specials ::= type_specifier_incl_string 
            {
              String RESULT = null;
		int typeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int typeright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String type = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		 RESULT = type; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(22/*type_specifier_incl_specials*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_specifier_incl_specials ::= VOID 
            {
              String RESULT = null;
		 RESULT = "void"; 
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(22/*type_specifier_incl_specials*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // argument_list_no_void ::= argument_list COMMA type_specifier_incl_string IDENTIFIER 
            {
              Vector RESULT = null;
		int argsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int argsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		Vector args = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int paramTypeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int paramTyperight = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String paramType = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int paramNameleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int paramNameright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String paramName = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = args;
               RESULT.addElement(new JrpcgenParamInfo(paramType, paramName));
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(21/*argument_list_no_void*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // argument_list_no_void ::= argument_list COMMA type_specifier_incl_string 
            {
              Vector RESULT = null;
		int argsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int argsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		Vector args = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		int paramTypeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int paramTyperight = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String paramType = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = args;
               RESULT.addElement(new JrpcgenParamInfo(paramType, null));
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(21/*argument_list_no_void*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // argument_list_no_void ::= type_specifier_incl_string IDENTIFIER 
            {
              Vector RESULT = null;
		int paramTypeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int paramTyperight = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String paramType = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int paramNameleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int paramNameright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String paramName = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = new Vector();
               RESULT.addElement(new JrpcgenParamInfo(paramType, paramName));
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(21/*argument_list_no_void*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argument_list_no_void ::= type_specifier_incl_string 
            {
              Vector RESULT = null;
		int paramTypeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int paramTyperight = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String paramType = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = new Vector();
               RESULT.addElement(new JrpcgenParamInfo(paramType, null));
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(21/*argument_list_no_void*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // argument_list ::= argument_list_no_void 
            {
              Vector RESULT = null;
		int argsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int argsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		Vector args = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = args; // just pass through
               int size = RESULT.size();
               //
               // All arguments, which are unnamed so far will now get
               // default names.
               //
               for ( int idx = 0; idx < size; ++idx ) {
                   JrpcgenParamInfo paraminfo =
                       (JrpcgenParamInfo) RESULT.elementAt(idx);
                   if ( paraminfo.parameterName == null ) {
                       paraminfo.parameterName = "arg" + (idx + 1);
                   }
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(20/*argument_list*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argument_list ::= VOID 
            {
              Vector RESULT = null;
		
               RESULT = null; // special case, allows fast tests
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(20/*argument_list*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_def ::= type_specifier_incl_specials IDENTIFIER LPAREN argument_list RPAREN EQUAL value SEMICOLON 
            {
              JrpcgenProcedureInfo RESULT = null;
		int resultTypeleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-7)).left;
		int resultTyperight = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-7)).right;
		String resultType = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-7)).value;
		int procIdleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).left;
		int procIdright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).right;
		String procId = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).value;
		int argsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int argsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		Vector args = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int procNumberleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int procNumberright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String procNumber = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               RESULT = new JrpcgenProcedureInfo(procId, procNumber, resultType, args);
               //
               // NOTE: we can not add the identifier for the procedure number
               // to the list of global identifiers yet, as we do not know the
               // version number. This has to be fixed after the embracing
               // version definition was parsed in toto.
               //
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(19/*procedure_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-7)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_defs ::= procedure_defs procedure_def 
            {
              Vector RESULT = null;
		int procsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int procsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		Vector procs = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int procleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int procright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenProcedureInfo proc = (JrpcgenProcedureInfo)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                procs.addElement(proc);
                RESULT = procs;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(18/*procedure_defs*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedure_defs ::= procedure_def 
            {
              Vector RESULT = null;
		int procleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int procright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenProcedureInfo proc = (JrpcgenProcedureInfo)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                RESULT = new Vector();
                RESULT.addElement(proc);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(18/*procedure_defs*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // version_def ::= VERSION IDENTIFIER LBRACE procedure_defs RBRACE EQUAL value SEMICOLON 
            {
              JrpcgenVersionInfo RESULT = null;
		int versIdleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).left;
		int versIdright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).right;
		String versId = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).value;
		int procsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int procsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		Vector procs = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int versNumberleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int versNumberright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String versNumber = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               JrpcgenConst vers = new JrpcgenConst(versId, versNumber, jrpcgen.baseClassname);
               RESULT = new JrpcgenVersionInfo(versId, versNumber, procs);
               if ( jrpcgen.globalIdentifiers.put(versId, vers) != null ) {
                   parser.report_error("version identifier \"" + versId + "\" already defined", versIdleft);
               }
               versNumber = vers.resolveValue();
               if ( versNumber == null ) {
                   parser.report_error("Can not resolve version identifier \"" +
                                      versId + "\" to integer literal", versNumberleft);
               }
               //
               // We also need to fix up the procedure identifiers by appending
               // the version number.
               //
               int size = procs.size();
               for ( int idx = 0; idx < size; ++idx ) {
                   JrpcgenProcedureInfo procInfo = (JrpcgenProcedureInfo)
                       procs.elementAt(idx);
                   procInfo.procedureId += "_" + versNumber;
                   JrpcgenConst proc = new JrpcgenConst(procInfo.procedureId,
                                                        procInfo.procedureNumber,
                                                        jrpcgen.baseClassname);
                   if ( jrpcgen.globalIdentifiers.put(procInfo.procedureId, proc) != null ) {
                       // FIXME line number
                       parser.report_error("procedure identifier \"" + procInfo.procedureId + "\" already defined", 0);
                   }
               }

               if ( jrpcgen.debug ) {
                   System.out.println("VERSION " + versId + " = " + versNumber);
                   for ( int idx = 0; idx < size; ++idx ) {
                       JrpcgenProcedureInfo procInfo = (JrpcgenProcedureInfo)
                           procs.elementAt(idx);
                       System.out.print("PROCEDURE " + procInfo.resultType + " "
                                          + procInfo.procedureId + "(");
                       if ( procInfo.parameters == null ) {
                           System.out.print("void");
                       } else {
                           for ( int pidx = 0; pidx < procInfo.parameters.size(); ++pidx ) {
                               JrpcgenParamInfo paramInfo = (JrpcgenParamInfo)
                                   procInfo.parameters.elementAt(pidx);
                               if ( pidx > 0 ) {
                                   System.out.print(",");
                               }
                               System.out.print(paramInfo.parameterType);
                               if ( paramInfo.parameterName != null ) {
                                   System.out.print(" " + paramInfo.parameterName);
                               }
                           }
                       }
                       System.out.println(") = "
                                          + procInfo.procedureNumber);
                   }
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(17/*version_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-7)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // version_defs ::= version_defs version_def 
            {
              Vector RESULT = null;
		int versionsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int versionsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		Vector versions = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int versionleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int versionright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenVersionInfo version = (JrpcgenVersionInfo)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                versions.addElement(version);
                RESULT = versions;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(16/*version_defs*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // version_defs ::= version_def 
            {
              Vector RESULT = null;
		int versionleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int versionright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenVersionInfo version = (JrpcgenVersionInfo)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                RESULT = new Vector();
                RESULT.addElement(version);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(16/*version_defs*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // program_def ::= PROGRAM IDENTIFIER LBRACE version_defs RBRACE EQUAL value SEMICOLON 
            {
              JrpcgenProgramInfo RESULT = null;
		int progIdleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).left;
		int progIdright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).right;
		String progId = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-6)).value;
		int versionsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int versionsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		Vector versions = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int progNumberleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int progNumberright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String progNumber = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               JrpcgenConst prog = new JrpcgenConst(progId, progNumber, jrpcgen.baseClassname);
               RESULT = new JrpcgenProgramInfo(progId, progNumber, versions);
               if ( jrpcgen.globalIdentifiers.put(progId, prog) != null ) {
                   parser.report_error("program identifier \"" + progId + "\" already defined", progIdleft);
               }
               if ( jrpcgen.debug ) {
                   System.out.println("PROGRAM " + progId + " = " + progNumber);
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(15/*program_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-7)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typedef_def ::= TYPEDEF declaration SEMICOLON 
            {
              Object RESULT = null;
		int declleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int declright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		JrpcgenDeclaration decl = (JrpcgenDeclaration)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               if ( jrpcgen.globalIdentifiers.put(decl.identifier, decl) != null ) {
                   parser.report_error("typedef identifier \"" + decl.identifier + "\" already defined", declleft);
               }
               if ( jrpcgen.debug ) {
                   System.out.print("TYPEDEF ");
                   decl.dump();
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(13/*typedef_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // union_case ::= DEFAULT COLON declaration SEMICOLON 
            {
              JrpcgenUnionArm RESULT = null;
		int elementleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int elementright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		JrpcgenDeclaration element = (JrpcgenDeclaration)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               RESULT = new JrpcgenUnionArm(null, element);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(12/*union_case*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // union_case ::= CASE value COLON declaration SEMICOLON 
            {
              JrpcgenUnionArm RESULT = null;
		int valleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int valright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String val = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int elementleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int elementright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		JrpcgenDeclaration element = (JrpcgenDeclaration)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               RESULT = new JrpcgenUnionArm(val, element);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(12/*union_case*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // union_case ::= CASE value COLON 
            {
              JrpcgenUnionArm RESULT = null;
		int valleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int valright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String val = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               RESULT = new JrpcgenUnionArm(val, null);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(12/*union_case*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // union_cases ::= union_cases union_case 
            {
              Vector RESULT = null;
		int armsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int armsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		Vector arms = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int armleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int armright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenUnionArm arm = (JrpcgenUnionArm)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                arms.addElement(arm);
                RESULT = arms;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(11/*union_cases*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // union_cases ::= union_case 
            {
              Vector RESULT = null;
		int armleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int armright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenUnionArm arm = (JrpcgenUnionArm)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                RESULT = new Vector();
                RESULT.addElement(arm);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(11/*union_cases*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // union_def ::= UNION IDENTIFIER SWITCH LPAREN declaration RPAREN LBRACE union_cases RBRACE SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-8)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-8)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-8)).value;
		int descrimleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-5)).left;
		int descrimright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-5)).right;
		JrpcgenDeclaration descrim = (JrpcgenDeclaration)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-5)).value;
		int elementsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int elementsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		Vector elements = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		
               JrpcgenUnion uni = new JrpcgenUnion(id, descrim, elements);
               if ( jrpcgen.globalIdentifiers.put(id, uni) != null ) {
                   parser.report_error("union identifier \"" + id + "\" already defined", idleft);
               }
               if ( jrpcgen.debug ) {
                   uni.dump();
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(10/*union_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-9)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struct_def ::= STRUCT IDENTIFIER LBRACE declarations RBRACE SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int elementsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int elementsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		Vector elements = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		
               JrpcgenStruct strct = new JrpcgenStruct(id, elements);
               if ( jrpcgen.globalIdentifiers.put(id, strct) != null ) {
                   parser.report_error("struct identifier \"" + id + "\" already defined", idleft);
               }
               if ( jrpcgen.debug ) {
                   strct.dump();
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(9/*struct_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-5)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // enum_element ::= IDENTIFIER EQUAL value 
            {
              JrpcgenConst RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		int valleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int valright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String val = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               RESULT = new JrpcgenConst(id, val);
               if ( jrpcgen.globalIdentifiers.put(id, RESULT) != null ) {
                   parser.report_error("identifier \"" + id + "\" already defined", idleft);
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(8/*enum_element*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // enum_element ::= IDENTIFIER 
            {
              JrpcgenConst RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               //
               // We don't know yet the value, so we don't specify one. The
               // value will be fixed up when the production for the complete
               // enumeration triggers.
               //
               RESULT = new JrpcgenConst(id, null);
               if ( jrpcgen.globalIdentifiers.put(id, RESULT) != null ) {
                   parser.report_error("identifier \"" + id + "\" already defined", idleft);
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(8/*enum_element*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // enum_elements ::= enum_elements COMMA enum_element 
            {
              Vector RESULT = null;
		int elementsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int elementsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		Vector elements = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		int elleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int elright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenConst el = (JrpcgenConst)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               //
               // If no specific value has been assigned to this element of
               // an enumeration, increment value of previous element and
               // assign the new value to this element. BTW -- we let the
               // Java compiler do the calculation, so references to
               // other constants by name are valid.
               //
               if ( el.value == null ) {
                   el.value = ((JrpcgenConst)elements.elementAt(elements.size() - 1)).value
                              + "+1";
               }
               elements.addElement(el);
               RESULT = elements;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(7/*enum_elements*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // enum_elements ::= enum_element 
            {
              Vector RESULT = null;
		int elleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int elright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenConst el = (JrpcgenConst)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
               //
               // If no specific value has been assigned to this element of
               // an enumeration, assign zero by default.
               //
               if ( el.value == null ) {
                   el.value = "0";
               }
               RESULT = new Vector();
               RESULT.addElement(el);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(7/*enum_elements*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // enum_def ::= ENUM IDENTIFIER LBRACE enum_elements RBRACE SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).value;
		int elementsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).left;
		int elementsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).right;
		Vector elements = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-2)).value;
		
               //
               // Fix up enclosure of enumeration elements, so we can later
               // use a full qualified identifier.
               //
               int size = elements.size();
               for ( int idx = 0; idx < size; ++idx ) {
                   JrpcgenConst c = (JrpcgenConst) elements.elementAt(idx);
                   c.enclosure = id;
               }
               JrpcgenEnum type = new JrpcgenEnum(id, elements);
               if ( jrpcgen.globalIdentifiers.put(id, type) != null ) {
                   parser.report_error("enum identifier \"" + id + "\" already defined", idleft);
               }
               if ( jrpcgen.debug ) {
                   type.dump();
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(6/*enum_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-5)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant_def ::= CONST IDENTIFIER EQUAL value SEMICOLON 
            {
              Object RESULT = null;
		int idleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).left;
		int idright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).right;
		String id = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-3)).value;
		int valueleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int valueright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		String value = (String)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		
               JrpcgenConst type = new JrpcgenConst(id, value, jrpcgen.baseClassname);
               if ( jrpcgen.globalIdentifiers.put(id, type) != null ) {
                   parser.report_error("const identifier \"" + id + "\" already defined", idleft);
               }
               if ( jrpcgen.debug ) {
                   System.out.print("CONST ");
                   type.dump();
                   System.out.println();
               }
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(5/*constant_def*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-4)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= typedef_def 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(4/*definition*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= union_def 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(4/*definition*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definition ::= struct_def 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(4/*definition*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= enum_def 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(4/*definition*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= constant_def 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(4/*definition*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definitions ::= definitions definition 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(3/*definitions*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definitions ::= definition 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(3/*definitions*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definitions_opt ::= definitions 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(2/*definitions_opt*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definitions_opt ::= 
            {
              Object RESULT = null;

              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(2/*definitions_opt*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_defs ::= program_defs program_def 
            {
              Vector RESULT = null;
		int progDefsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int progDefsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		Vector progDefs = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		int progDefleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int progDefright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenProgramInfo progDef = (JrpcgenProgramInfo)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                progDefs.addElement(progDef);
                RESULT = progDefs;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(14/*program_defs*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_defs ::= program_def 
            {
              Vector RESULT = null;
		int progDefleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int progDefright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		JrpcgenProgramInfo progDef = (JrpcgenProgramInfo)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                RESULT = new Vector();
                RESULT.addElement(progDef);
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(14/*program_defs*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilation_unit ::= definitions_opt program_defs 
            {
              Object RESULT = null;
		int progDefsleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).left;
		int progDefsright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right;
		Vector progDefs = (Vector)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).value;
		
                jrpcgen.programInfos = progDefs;
            
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(1/*compilation_unit*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          return CUP$JrpcgenParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left;
		int start_valright = ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).right;
		Object start_val = (Object)((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol) CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).value;
		RESULT = start_val;
              CUP$JrpcgenParser$result = new org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol(0/*$START*/, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-1)).left, ((org.acplt.oncrpc.apps.jrpcgen.cup_runtime.Symbol)CUP$JrpcgenParser$stack.elementAt(CUP$JrpcgenParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$JrpcgenParser$parser.done_parsing();
          return CUP$JrpcgenParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

